#include<stdio.h>
#include<stdlib.h>
int safe1,Req[10],Ch,pid,Alloc[10][10],Maxi[10][10],Need[10][10],Avail[10],P=0,Inst=0,i,j,Work[10],Res[10],flag,k,w,RES[10];
void safe()
{
        for(j=0;j<Inst;j++)
            Work[j]=Avail[j];
        for(i=0;i<P;i++) Res[i]=-1;
        w=0;
        for(i=0;i<P;i++) RES[i]=0;
 lable: for(i=0;i<P;i++)
        {
            if(RES[i]==0)
            {
                flag=0;
                for(j=0;j<Inst;j++)
                {
                    if(Need[i][j]>Work[j])
                    {
                        flag=1;
                    }
                }
                if(flag==0)
                {
                    flag=0;
                    for(k=0;k<Inst;k++) Work[k]=Work[k]+Alloc[i][k];
                    Res[w]=i;w++;RES[i]=1;
                }
            }
        }
        for(i=0;i<P;i++)
        {
            if(Res[i]==-1)
                goto lable;
        }
	for(i=0;i<P;i++) 
	{
		if(RES[i]==1) safe1=1;
		else {safe1=0; break;}
	}
	if(safe1)
	{
		printf("Sysyem is in SAFE state......\n");
        	for(i=0;i<P;i++)
            		printf("%d\t",Res[i]);
	}
	else
		printf("System is NOT IN SAFE state.....\n");
}
main()
{

    printf("Enter the no of PROCESS\n");
    scanf("%d",&P);
    printf("Enter the no of Instances\n");
    scanf("%d",&Inst);
    printf("Enter Available Vector of %d Instances\t",Inst);
    for(i=0;i<Inst;i++) scanf("%d",&Avail[i]);
    printf("\nEnter the ALLOCATION matrix and MAX matrix for %d PROCESS\n",P);
    for(i=0;i<P;i++)
        for(j=0;j<Inst;j++)
            scanf("%d",&Alloc[i][j]);
    for(i=0;i<P;i++)
        for(j=0;j<Inst;j++)
            scanf("%d",&Maxi[i][j]);
    printf("Need Matrix is:\n");
    for(i=0;i<P;i++)
    {
        for(j=0;j<Inst;j++)
        {
            Need[i][j]=Maxi[i][j]-Alloc[i][j];
            printf("%d\t",Need[i][j]);
        }
        printf("\n");
    }
    safe();
    do
    {
        printf("MENU\n");
        printf("1.NEW REQUEST\n2.Exit");
        printf("Enter ur Choice\n");
            scanf("%d",&Ch);
        switch(Ch)
        {
            case 1:printf("Enter the Requesting PID\n");
               scanf("%d",&pid);
               printf("Enter the Request\n");
               for(i=0;i<Inst;i++)
                    scanf("%d",&Req[i]);
               for(j=0;j<Inst;j++)
               {
                    if(Req[j]>Need[pid][j])
                    {
                        printf("REQUEST Can't be Granted Becoz Req > Need\n");
                        break;
                    }
                    else if(Req[j]>Avail[j])
                    {
                        printf("REQUEST Can't be Granted Becoz Req > Available\n");
                        break;
                    }
                    else
                    {
                         Avail[j]=Avail[j]-Req[j];
                         Alloc[pid][j]=Alloc[pid][j]+Req[j];
                         Need[pid][j]=Need[pid][j]-Req[j];
                         safe();
                    }
                }
                break;
        }
    }while(Ch!=2);
}